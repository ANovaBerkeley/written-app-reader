{"version":3,"sources":["global.js","App.js","components/applications/application.jsx","components/guidelines/guidelines.jsx","components/decisions/decisions.jsx","serviceWorker.js","index.js"],"names":["global","AIRTABLE_KEY","APPLICATIONS_URL","DECISIONS_URL","OFFICERS","SEM_SECRET","NUM_YES","IGNORED_FIELDS","QUESTION_ORDER","INSTRUCTIONS","App","state","reviewerName","error","Error","this","userName","prompt","includes","keyAttempt","setState","authUser","message","NavBar","path","from","to","Component","class","id","style","color","textDecoration","Applications","userDecisions","allApplications","remainingApps","comments","flag","numYeses","votingStarted","votingComplete","entry","Array","join","array","sort","Math","random","fetch","headers","Authorization","then","res","json","result","records","shuffle","filter","r","fields","length","map","applicantName","vote","body","method","console","text","log","toaster","notify","className","duration","position","airtableStateHandler","document","getElementById","scrollTop","k","fieldResponse","formatFieldResponse","key","slice","i","Object","keys","orderFields","renderAppLine","event","target","value","flagState","checked","disabled","app","props","err","onClick","voteOnRemainingApps","info","initPage","voteRemainingButton","renderVoteRemainingButton","name","type","htmlFor","current","currentApp","renderApp","onChange","handleCommentsChange","bind","handleFlagChange","airtableVoteHandler","window","scrollTo","pagecontent","Guidelines","children","Decisions","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.69d3b5df.chunk.js","sourcesContent":["// For global variables.\r\n// The global scope in React Native is variable global.\r\n// For ex: as global.foo = foo, then you can use global.foo anywhere as a global variable.\r\n// Make sure you import './global.js' in your files to use global variables!\r\nglobal.AIRTABLE_KEY = \"keyd6qkfF0Q6csT9G\"; \r\nglobal.APPLICATIONS_URL = \"https://api.airtable.com/v0/appm1EwjHL56mOmPx/All%20Applications\"; // Applications airtable link\r\nglobal.DECISIONS_URL = \"https://api.airtable.com/v0/appm1EwjHL56mOmPx/Decisions\"; // Decisions airtable link\r\nglobal.OFFICERS = [\r\n    \"Aditya Varshney\",\r\n    \"Anna Gao\",\r\n    \"Sai Yandapalli\",\r\n    \"Hau Nguyen\",\r\n    \"Andrew Lieu\"\r\n];\r\nglobal.SEM_SECRET = \"993342\"\r\nglobal.NUM_YES = 30;\r\nglobal.IGNORED_FIELDS = [\r\n    \"Name\",\r\n    \"Email\",\r\n    \"Year\",\r\n    \"Phone Number\",\r\n];\r\n/** Custom ordering of questions */\r\nglobal.QUESTION_ORDER = [\r\n    6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,0,1,2,3,4,5,\r\n]\r\nglobal.INSTRUCTIONS = `\r\n# Recruitment guidelines\r\nPlease review this page for instructions, reminders, and tips on how to proceed app-reading. \r\nAlthough each officer brings his or her own unique perspective to the app-reading process, standardized app-reading criteria and expectations make the decision process smoother for everyone!\r\n\r\n## Deadlines\r\n- app reading is due by **DATE** at **TIME**\r\n- the deliberations meeting will be in **LOCATION** from **7:00pm to 9:00pm** on **Friday**\r\n\r\n### Mission Statement\r\nSome things to look out for:\r\n\r\n- is the candidate discussing ANova's actual mission? \r\n- do they make generalizations about our students and/or their backgrounds or communities? \r\n- is their response centered around themselves or around our service impact?\r\n- do they have a desire to learn more about the communities we work with?\r\n- etc. etc.\r\n\r\n### Mentorship response\r\n- do they have some understanding of the challenges and responsibilities of mentoring students?\r\n- do they come off as open-minded, strict, self-centered, aloof, etc.?\r\n- reading this app, would you anticipate that they'd adjust well to an ANova site?\r\n- etc. etc.\r\n\r\n### Structural inequality\r\n- gauge how much they understand about inequality vs. inequity \r\n- gauge how much they know about different socioeconomic issues relating to education and beyond\r\n- have they been active in assisting underresourced or marginalized communities?\r\n- etc. etc.\r\n\r\n### Site availability\r\n- do they have at least 3 site times? If not, but the app is good, flag it and bring it up during delibs.\r\n`;","import React, { Component } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Application from \"./components/applications/application\";\r\nimport Guidelines from \"./components/guidelines/guidelines\";\r\nimport Decisions from \"./components/decisions/decisions\";\r\nimport \"./global.js\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      reviewerName: null,\r\n      error: null,\r\n    };\r\n  }\r\n\r\n  /** \r\n   * Prompts user to enter their name. \r\n   * If the name is valid, allow the user to proceed & populate reviewerName state\r\n   * If invalid, populate error state. \r\n   * Gets called on Mount and on refresh.\r\n   */\r\n  authUser() {\r\n    const error = Error(\"Invalid Credentials!\");\r\n    if (!this.state.reviewerName) {\r\n      var userName = prompt(\"Please enter your name: \", \"First Last\");\r\n      if (userName === null || userName === \"\" || !global.OFFICERS.includes(userName)) { // TODO: fix this weak-ass auth approach\r\n        this.setState({error: error});\r\n      } else {\r\n        var keyAttempt = prompt(\"Secret key: \", \"Given to you by executives\");\r\n        if (keyAttempt === null || keyAttempt === \"\" || !global.SEM_SECRET===keyAttempt) { // TODO: fix this weak-ass auth approach\r\n          this.setState({error: error});\r\n        } else {\r\n          this.setState({reviewerName: userName});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.authUser();\r\n  }\r\n\r\n  render() {\r\n    const error = this.state.error;\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>\r\n    }\r\n\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <NavBar />\r\n          <hr />\r\n          <div>\r\n            <Switch>\r\n              <Route path=\"/written-app/guidelines\">\r\n                <Guidelines />\r\n              </Route>\r\n              <Route path=\"/written-app/applications\">\r\n                <Application reviewerName={this.state.reviewerName}/>\r\n              </Route>\r\n              <Route path=\"/written-app/decisions\">\r\n                <Decisions />\r\n              </Route>\r\n              <Redirect from=\"\" to=\"/written-app/guidelines\" />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <div class=\"topnav\">\r\n      <ul>\r\n        <li>\r\n          <Link id=\"guidelines\" to=\"/written-app/guidelines\" style={{ color: 'inherit', textDecoration: 'inherit'}}>Guidelines</Link>\r\n        </li>\r\n        <li>\r\n          <Link id=\"apps\" to=\"/written-app/applications\" style={{ color: 'inherit', textDecoration: 'inherit'}}>Read applications</Link>\r\n        </li>\r\n        <li>\r\n          <Link id=\"decisions\" to=\"/written-app/decisions\" style={{ color: 'inherit', textDecoration: 'inherit'}}>See Your App Decision History (tbd)</Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React, { Component } from \"react\";\r\nimport toaster from 'toasted-notes'; // requires react-spring module! yarn add toasted-notes; npm install react-spring;\r\nimport \"./application.css\";\r\nimport \"../../global.js\";\r\n\r\nclass Applications extends Component {\r\n  /**\r\n   * Creates an instance of the Applications page.\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      error: null,\r\n      userDecisions: [],\r\n      allApplications: [],\r\n      remainingApps: [],\r\n      comments: '',\r\n      flag: \"No\",\r\n      numYeses: null,\r\n      votingStarted: false,\r\n      votingComplete: false,\r\n    }\r\n  }\r\n  \r\n  /** \r\n   * Formats field responses\r\n   * for multiple select questions like \"Which programming languages do you know?\", converts Object [a,b,c] to \"a, b, c\"\r\n   * @param {Object} entry: field response to be formatted (can be string or Object[])\r\n  */\r\n  formatFieldResponse(entry) {\r\n    return (typeof(entry) !== \"string\") ? Array.from(entry).join(\", \") : entry;\r\n  }\r\n\r\n  /** \r\n   * Destructively shuffles an input array. \r\n   * @returns shuffled array\r\n  */\r\n  shuffle(array) {\r\n    array.sort(() => Math.random() - .5);\r\n    return array;\r\n  }\r\n\r\n  /** \r\n   * Updates state variables to reflect current Airtable state, \r\n   * To find all applications a reviewer has yet to vote on:\r\n   * (1) GET from Decision Table, filter by Reviewer Name\r\n   * (2) GET from All Applications Table\r\n   * from (2) remove all records with matching IDs in (1)\r\n   * @param {string} reviewerName: name of reviewer\r\n    */\r\n  airtableStateHandler(reviewerName) {\r\n    const formula = \"?filterByFormula=%7BReviewer%20Name%7D%20%3D%20%20%22\"\r\n    fetch(global.DECISIONS_URL + formula + reviewerName + \"%22&view=Grid%20view\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + global.AIRTABLE_KEY\r\n        }\r\n      })\r\n        .then(res => res.json())\r\n        .then((result) => {\r\n          this.setState({\r\n            userDecisions: result.records,\r\n          });\r\n        }, (error) => {\r\n          this.setState({\r\n            error,\r\n          });\r\n        });\r\n    \r\n    fetch(global.APPLICATIONS_URL + \"?view=Grid%20view\", {\r\n      headers: {\r\n        Authorization: \"Bearer \" + global.AIRTABLE_KEY\r\n      }\r\n    })\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState((state) => { return {\r\n            allApplications: this.shuffle(result.records),\r\n            numYeses: global.NUM_YES - state.userDecisions.filter(r => r.fields['Interview'] === \"Yes\").length,\r\n            remainingApps: result.records.filter(r => !(state.userDecisions.map(r => r.fields['ID'])).includes(r.id)),\r\n          }});\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            error,\r\n          });\r\n        }\r\n      );\r\n      \r\n      this.setState({\r\n        comments: '',\r\n        flag: \"No\",\r\n      });\r\n\r\n      if (this.state.error) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n  }\r\n\r\n  /** \r\n   * Asynchronously submits a vote via POST and calls airtableStateHandler. \r\n   * @param {string} applicantName: applicant name\r\n   * @param {string} reviewerName: name of reviewer\r\n   * @param {string} vote: \"Yes\" or \"No\" (interview decision)\r\n   * @param {string} flag: \"Yes\" or \"No\" (mark as flagged)\r\n   * @param {string} comments: comments for this application\r\n   * @param {string} id: application ID from the All Applications Table\r\n  */\r\n  async airtableVoteHandler(applicantName, reviewerName, vote, flag, comments, id) {\r\n    try {\r\n      const r = await fetch(global.DECISIONS_URL, {\r\n        body: \"{\\\"records\\\": [{\\\"fields\\\": {\\\"Applicant Name\\\": \\\"\"+applicantName+\"\\\",\\\"Reviewer Name\\\": \\\"\"+reviewerName+\"\\\",\\\"Interview\\\": \\\"\"+vote+\"\\\",\\\"Flag\\\": \\\"\"+flag+\"\\\",\\\"Comments\\\": \\\"\"+comments+\"\\\", \\\"ID\\\": \\\"\"+id+\"\\\"}}]}\",\r\n        headers: {\r\n          Authorization: \"Bearer \" + global.AIRTABLE_KEY,\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        method: \"POST\"\r\n      });\r\n      console.log(await r.text());\r\n\r\n      toaster.notify(<div className=\"toast\"><h4 className=\"toast-text\">Voted {vote} for {applicantName}!</h4></div>, {\r\n        duration: 1000,\r\n        position: 'bottom'\r\n      })\r\n\r\n      this.airtableStateHandler(reviewerName);\r\n      document.getElementById('app-view').scrollTop = 0;\r\n      console.log(this.state)\r\n    }\r\n    catch (err) {\r\n      console.log(\"fetch failed [VOTE]\", err);\r\n    }\r\n  }\r\n\r\n  /** \r\n   * Displays each question and response as a new paragraph line. \r\n   * @param {Object} fields: question : response dict\r\n   * @param {string} k: key in fields dict, usually the app question\r\n   * @returns paragraph response from the app (CSS app-line)\r\n  */\r\n  renderAppLine(fields, k) {\r\n    const fieldResponse = this.formatFieldResponse(fields[k]);\r\n    if (!global.IGNORED_FIELDS.includes(k)) { // certain fields removed to eliminate app reader bias\r\n      return (\r\n        <div className=\"app-question\" key={k}>\r\n          <p className=\"app-field\"><b>{k}</b></p>\r\n          <p className=\"app-response\">{fieldResponse}</p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  /** \r\n   * OPTIONAL: Orders questions based on global.QUESTION_ORDER \r\n   * @param {Object} fields: question : response dict\r\n  */\r\n  orderFields(fields) {\r\n    return global.QUESTION_ORDER ? global.QUESTION_ORDER.slice().map(i => Object.keys(fields)[i]) : Object.keys(fields);\r\n  }\r\n\r\n  /**\r\n   * Displays the application\r\n   * @param {dictionary} fields \r\n   */\r\n  renderApp(fields) {\r\n    const orderedFields = this.orderFields(fields);\r\n    return orderedFields.map((k) => this.renderAppLine(fields, k));\r\n  }\r\n\r\n  /** \r\n   * Handles the event where the user comments something\r\n   * @param {event} event: change event\r\n  */\r\n  handleCommentsChange(event) {\r\n    this.setState({\r\n      comments: event.target.value,\r\n    });\r\n  }\r\n\r\n  /** \r\n   * Handles the event where the user checks the flag check box to flag an app\r\n   * @param {event} event: change event \r\n  */\r\n  handleFlagChange(event) {\r\n    const flagState = event.target.checked ? \"Yes\" : \"No\";\r\n    console.log(flagState)\r\n    this.setState({\r\n      flag: flagState,\r\n    });\r\n  }\r\n\r\n  /** Votes \"No\" on the remaining apps once the user is out of yeses */\r\n  async voteOnRemainingApps() {\r\n    document.getElementById(\"leftover-no-button\").disabled=true;\r\n    if (this.state.numYeses === 0) {\r\n      console.log(\"Voting 'No' on remaining apps!\")\r\n      // mark remaining apps as \"No\"\r\n      const records = this.state.remainingApps.map(\r\n        (app) => {\r\n          let applicantName = app.fields['Name'];\r\n          let reviewerName = this.props.reviewerName;\r\n          let vote = \"No\";\r\n          let flag = \"No\";\r\n          let comments = \"\";\r\n          let id = app.id;\r\n          return \"{\\\"fields\\\": {\\\"Applicant Name\\\": \\\"\"+applicantName+\"\\\",\\\"Reviewer Name\\\": \\\"\"+reviewerName+\"\\\",\\\"Interview\\\": \\\"\"+vote+\"\\\",\\\"Flag\\\": \\\"\"+flag+\"\\\",\\\"Comments\\\": \\\"\"+comments+\"\\\", \\\"ID\\\": \\\"\"+id+\"\\\"}}\"\r\n        }\r\n      );\r\n\r\n      try {\r\n        records.map((r) =>\r\n          fetch(global.DECISIONS_URL, {\r\n            body: \"{\\\"records\\\": [\"+ r +\"]}\",\r\n            headers: {\r\n              Authorization: \"Bearer \" + global.AIRTABLE_KEY,\r\n              \"Content-Type\": \"application/json\"\r\n            },\r\n            method: \"POST\"\r\n          }));\r\n      }\r\n      catch (err) {\r\n        console.log(\"fetch failed [VOTE]\", err);\r\n      }\r\n    }\r\n    this.setState({votingComplete: true}, () => {\r\n      console.log(this.state.votingComplete, \"votingComplete\"); \r\n      toaster.notify(<div className=\"done-toast\"><h4 className=\"toast-text\">All done! Great work!</h4></div>, {\r\n        position: 'bottom',\r\n        duration: null,\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Renders the voteutton if remaining apps exist */\r\n  renderVoteRemainingButton() {\r\n    if (this.state.remainingApps.length > 0) {\r\n      return (\r\n        <div>\r\n          <h3>No Yeses Remaining</h3>\r\n          <button className=\"leftover-no-button\" id=\"leftover-no-button\" onClick={() => {this.voteOnRemainingApps(); this.airtableStateHandler(this.props.reviewerName);}}>\r\n            Vote \"No\" on Remaining {this.state.remainingApps.length} Apps\r\n          </button>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h3>No Apps to Review.</h3>\r\n          <p>Visit the Airtable to make changes</p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Refreshes page on start to retrieve updated state */\r\n  initPage() {\r\n    console.log(this.state.votingStarted, \"status in startVoting\");\r\n    this.setState({votingStarted: true,});\r\n    this.airtableStateHandler(this.props.reviewerName);\r\n  }\r\n\r\n  /** Sets up app reader component */\r\n  componentDidMount() {\r\n    this.airtableStateHandler(this.props.reviewerName);\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.votingStarted) {\r\n      console.info('Initializing');\r\n      this.initPage();\r\n    }\r\n\r\n    if (this.state.remainingApps.length === 0 || this.state.numYeses === 0) {\r\n      const voteRemainingButton = this.renderVoteRemainingButton();\r\n\r\n      return (\r\n        <div>\r\n          <div className=\"container\">\r\n            <div className=\"header\">\r\n              <div className=\"header-application\">Application</div>\r\n              <div className=\"header-stats\">Apps Remaining: {this.state.remainingApps.length}</div>\r\n              <div className=\"header-stats\">Yeses Remaining: {this.state.numYeses}</div>\r\n            </div>\r\n\r\n            <div className=\"app-section\">\r\n              <div className=\"app-view\" id=\"app-view\"></div>\r\n              <div className=\"app-options\">\r\n                <h3 className=\"reviewer-label\">Reviewer:</h3>\r\n                <p className=\"reviewer-name\">{this.props.reviewerName}</p>\r\n                <h4 className=\"comments-label\">Comment:</h4>\r\n                <textarea id=\"comments-textbox\" className=\"comments-textbox\" name=\"app\" value={this.state.comments} disabled={true}></textarea>\r\n                <div className=\"flag\">\r\n                  <input id=\"flag-checkbox\" className=\"flag-checkbox\" type=\"checkbox\" checked={this.state.flag===\"Yes\"} disabled={true}></input>\r\n                  <label htmlFor=\"flag-checkbox\">Flag</label>\r\n                </div>\r\n                <div className=\"vote\">\r\n                  {voteRemainingButton}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    const current = this.state.remainingApps[0];\r\n    const fields = current.fields;\r\n    const id = current.id;\r\n    const applicantName = fields[\"Name\"];\r\n    const reviewerName = this.props.reviewerName;\r\n    const currentApp = this.renderApp(fields);\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <div className=\"header\">\r\n            <div className=\"header-application\">Application</div>\r\n            <div className=\"header-stats\">Apps Remaining: {this.state.remainingApps.length}</div>\r\n            <div className=\"header-stats\">Yeses Remaining: {this.state.numYeses}</div>\r\n          </div>\r\n\r\n          <div className=\"app-section\">\r\n            <div className=\"app-view\" id=\"app-view\">{currentApp}</div>\r\n            <div className=\"app-options\">\r\n              <h3 className=\"reviewer-label\">Reviewer:</h3>\r\n              <p className=\"reviewer-name\">{this.props.reviewerName}</p>\r\n              <h4 className=\"comments-label\">Comment:</h4>\r\n              <textarea id=\"comments-textbox\" className=\"comments-textbox\" name=\"app\" value={this.state.comments} onChange={this.handleCommentsChange.bind(this)}></textarea>\r\n              <div className=\"flag\">\r\n                <input id=\"flag-checkbox\" className=\"flag-checkbox\" type=\"checkbox\" checked={this.state.flag===\"Yes\"} onChange={this.handleFlagChange.bind(this)}></input>\r\n                <label htmlFor=\"flag-checkbox\">Flag</label>\r\n              </div>\r\n              <div className=\"vote\">\r\n                <h3 className=\"vote-label\">Vote</h3>\r\n                <button className=\"no-button\" disabled={this.state.numYeses <= 0} onClick={() => {\r\n                  this.airtableVoteHandler(applicantName, reviewerName, \"No\", this.state.flag, this.state.comments, id); window.scrollTo(0,0);}}>\r\n                  No\r\n                </button>\r\n                <button className=\"skip-button\" onClick={() => {\r\n                  this.airtableStateHandler(reviewerName); document.getElementById('app-view').scrollTop = 0;}}>\r\n                  Skip\r\n                </button>\r\n                <button className=\"yes-button\" disabled={this.state.numYeses <= 0} onClick={() => {\r\n                  this.airtableVoteHandler(applicantName, reviewerName, \"Yes\", this.state.flag, this.state.comments, id); window.scrollTo(0,0);}}>\r\n                  Yes\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Applications;\r\n","import React, { Component } from \"react\";\r\nimport Markdown from 'markdown-to-jsx';\r\nimport \"./guidelines.css\";\r\nimport \"../../global.js\";\r\n\r\nconst pagecontent = global.INSTRUCTIONS;\r\n\r\nclass Guidelines extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // add state\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Markdown className=\"md-body\" children={pagecontent}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Guidelines;","import React, { Component } from \"react\";\r\nimport \"./decisions.css\";\r\nimport \"../../global.js\";\r\n\r\nclass Decisions extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // TODO: add state variables\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"md-body\">\r\n        <h2>App Decision History</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Decisions","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}