{"version":3,"sources":["components/applications/application.jsx","global.js","App.js","serviceWorker.js","index.js"],"names":["Applications","state","error","isLoaded","userDecisions","allApplications","remainingApps","comments","flag","numYeses","reviewerName","entry","Array","from","join","array","sort","Math","random","fetch","global","DECISIONS_URL","headers","Authorization","AIRTABLE_KEY","then","res","json","result","setState","records","APPLICATIONS_URL","shuffle","NUM_YES","filter","r","fields","length","map","includes","id","formdiv","document","getElementById","scrollTop","console","log","this","applicantName","vote","body","method","text","toaster","notify","className","duration","position","airtableStateHandler","k","fieldResponse","formatFieldResponse","IGNORED_FIELDS","key","QUESTION_ORDER","slice","i","Object","keys","orderFields","renderAppLine","event","target","value","flagState","checked","message","resource","name","disabled","type","htmlFor","current","currentApp","renderApp","onChange","handleCommentsChange","bind","handleFlagChange","onClick","airtableVoteHandler","window","scrollTo","Component","OFFICERS","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0d207397.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport toaster from 'toasted-notes'; // requires react-spring module! yarn add toasted-notes; npm install react-spring;\r\nimport \"./application.css\";\r\nimport \"../../global.js\";\r\n\r\nclass Applications extends Component {\r\n  /**\r\n   * Creates an instance of the Applications page.\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      userDecisions: [],\r\n      allApplications: [],\r\n      remainingApps: [],\r\n      comments: '',\r\n      flag: \"No\",\r\n      numYeses: null,\r\n      reviewerName: \"test\", // TODO: keep track of the current user via sign-in\r\n    }\r\n  }\r\n  \r\n  /** \r\n   * Formats field responses\r\n   * for multiple select questions like \"Which programming languages do you know?\", converts Object [a,b,c] to \"a, b, c\"\r\n   * @param {Object} entry: field response to be formatted (can be string or Object[])\r\n  */\r\n  formatFieldResponse(entry) {\r\n    return (typeof(entry) !== \"string\") ? Array.from(entry).join(\", \") : entry;\r\n  }\r\n\r\n  /** \r\n   * Destructively shuffles an input array. \r\n   * @returns shuffled array\r\n  */\r\n  shuffle(array) {\r\n    array.sort(() => Math.random() - .5);\r\n    return array;\r\n  }\r\n\r\n  /** \r\n   * Updates state variables to reflect current Airtable state, \r\n   * To find all applications a reviewer has yet to vote on:\r\n   * (1) GET from Decision Table, filter by Reviewer Name\r\n   * (2) GET from All Applications Table\r\n   * from (2) remove all records with matching IDs in (1)\r\n   * @param {string} reviewerName: name of reviewer\r\n    */\r\n  airtableStateHandler(reviewerName) {\r\n    const formula = \"?filterByFormula=%7BReviewer%20Name%7D%20%3D%20%20%22\"\r\n    fetch(global.DECISIONS_URL + formula + reviewerName + \"%22&view=Grid%20view\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + global.AIRTABLE_KEY\r\n        }\r\n      })\r\n        .then(res => res.json())\r\n        .then((result) => {\r\n          this.setState({\r\n            userDecisions: result.records,\r\n          });\r\n        }, (error) => {\r\n          this.setState({\r\n            error,\r\n          });\r\n        });\r\n    \r\n    fetch(global.APPLICATIONS_URL + \"?view=Grid%20view\", {\r\n      headers: {\r\n        Authorization: \"Bearer \" + global.AIRTABLE_KEY\r\n      }\r\n    })\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState((state) => { return {\r\n            allApplications: this.shuffle(result.records),\r\n            numYeses: global.NUM_YES - state.userDecisions.filter(r => r.fields['Interview'] === \"Yes\").length,\r\n            remainingApps: result.records.filter(r => !(state.userDecisions.map(r => r.fields['ID'])).includes(r.id)),\r\n            isLoaded: true,\r\n          }});\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error,\r\n          });\r\n        }\r\n      );\r\n\r\n      // scroll to top QOL\r\n      var formdiv = document.getElementById('app-view');\r\n      formdiv.scrollTop = 0;\r\n      console.log(formdiv.scrollTop);\r\n\r\n      if (this.state.error) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n  }\r\n\r\n  /** \r\n   * Asynchronously submits a vote via POST and calls airtableStateHandler. \r\n   * @param {string} applicantName: applicant name\r\n   * @param {string} reviewerName: name of reviewer\r\n   * @param {string} vote: \"Yes\" or \"No\" (interview decision)\r\n   * @param {string} flag: \"Yes\" or \"No\" (mark as flagged)\r\n   * @param {string} comments: comments for this application\r\n   * @param {string} id: application ID from the All Applications Table\r\n  */\r\n  async airtableVoteHandler(applicantName, reviewerName, vote, flag, comments, id) {\r\n    try {\r\n      const r = await fetch(global.DECISIONS_URL, {\r\n        body: \"{\\\"records\\\": [{\\\"fields\\\": {\\\"Applicant Name\\\": \\\"\"+applicantName+\"\\\",\\\"Reviewer Name\\\": \\\"\"+reviewerName+\"\\\",\\\"Interview\\\": \\\"\"+vote+\"\\\",\\\"Flag\\\": \\\"\"+flag+\"\\\",\\\"Comments\\\": \\\"\"+comments+\"\\\", \\\"ID\\\": \\\"\"+id+\"\\\"}}]}\",\r\n        headers: {\r\n          Authorization: \"Bearer \" + global.AIRTABLE_KEY,\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        method: \"POST\"\r\n      });\r\n      console.log(await r.text());\r\n      this.setState({\r\n        comments: '',\r\n        flag: \"No\",\r\n      });\r\n\r\n      toaster.notify(<div className=\"toast\"><h4 className=\"toast-text\">Voted {vote} for {applicantName}!</h4></div>, {\r\n        duration: 1000,\r\n        position: 'bottom'\r\n      })\r\n\r\n      this.airtableStateHandler(reviewerName);\r\n      console.log(this.state)\r\n    }\r\n    catch (err) {\r\n      console.log(\"fetch failed [VOTE]\", err);\r\n    }\r\n  }\r\n\r\n  /** \r\n   * Displays each question and response as a new paragraph line. \r\n   * @param {Object} fields: question : response dict\r\n   * @param {string} k: key in fields dict, usually the app question\r\n   * @returns paragraph response from the app (CSS app-line)\r\n  */\r\n  renderAppLine(fields, k) {\r\n    const fieldResponse = this.formatFieldResponse(fields[k]);\r\n    if (!global.IGNORED_FIELDS.includes(k)) { // certain fields removed to eliminate app reader bias\r\n      return (\r\n        <div className=\"app-question\" key={k}>\r\n          <p className=\"app-field\"><b>{k}</b></p>\r\n          <p className=\"app-response\">{fieldResponse}</p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  /** \r\n   * OPTIONAL: Orders questions based on global.QUESTION_ORDER \r\n   * @param {Object} fields: question : response dict\r\n  */\r\n  orderFields(fields) {\r\n    return global.QUESTION_ORDER ? global.QUESTION_ORDER.slice().map(i => Object.keys(fields)[i]) : Object.keys(fields);\r\n  }\r\n\r\n  /**\r\n   * Displays the application\r\n   * @param {dictionary} fields \r\n   */\r\n  renderApp(fields) {\r\n    const orderedFields = this.orderFields(fields);\r\n    return orderedFields.map((k) => this.renderAppLine(fields, k));\r\n  }\r\n\r\n  /** \r\n   * Handles the event where the user comments something\r\n   * @param {event} event: change event\r\n  */\r\n  handleCommentsChange(event) {\r\n    this.setState({\r\n      comments: event.target.value,\r\n    });\r\n  }\r\n\r\n  /** \r\n   * Handles the event where the user checks the flag check box to flag an app\r\n   * @param {event} event: change event \r\n  */\r\n  handleFlagChange(event) {\r\n    const flagState = event.target.checked ? \"Yes\" : \"No\";\r\n    console.log(flagState)\r\n    this.setState({\r\n      flag: flagState,\r\n    });\r\n  }\r\n\r\n  /** Sets up app reader component */\r\n  componentDidMount() {\r\n    this.airtableStateHandler(this.state.reviewerName);\r\n  }\r\n\r\n  render() {\r\n    const error = this.state.error;\r\n    const isLoaded = this.state.isLoaded;\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>\r\n    }\r\n    if (!isLoaded) {\r\n      return <div>Loading...</div>\r\n    }\r\n    \r\n    if (!this.state.remainingApps.length || this.state.numYeses === 0) {\r\n      const resource = !this.state.remainingApps.length ? \"apps\" : \"yeses\"\r\n      toaster.notify(<div className=\"toast\"><h4 className=\"toast-text\">No {resource} remaining!</h4></div>, {\r\n        position: 'bottom',\r\n        duration: null,\r\n      }); // TODO: fix! appears twice for some reason\r\n      return (\r\n        <div>\r\n          <div className=\"container\">\r\n            <div className=\"header\">\r\n              <div className=\"header-application\">Application</div>\r\n              <div className=\"header-stats\">Apps Remaining: {this.state.remainingApps.length}</div>\r\n              <div className=\"header-stats\">Yeses Remaining: {this.state.numYeses}</div>\r\n            </div>\r\n  \r\n            <div className=\"app-section\">\r\n              <div className=\"app-view\" id=\"app-view\"></div>\r\n              <div className=\"app-options\">\r\n                <h3 className=\"reviewer-name\">Reviewer: {this.state.reviewerName}</h3>\r\n                <h4 className=\"comments-label\">Comment:</h4>\r\n                <textarea id=\"comments-textbox\" className=\"comments-textbox\" name=\"app\" value={this.state.comments} disabled=\"true\"></textarea>\r\n                <div className=\"flag\">\r\n                  <input id=\"flag-checkbox\" className=\"flag-checkbox\" type=\"checkbox\" checked={this.state.flag===\"Yes\"} disabled=\"true\"></input>\r\n                  <label htmlFor=\"flag-checkbox\">Flag</label>\r\n                </div>\r\n                <div className=\"vote\">\r\n                  <h3 className=\"vote-label\">Vote</h3>\r\n                  <button className=\"no-button\" disabled=\"true\">\r\n                    No\r\n                  </button>\r\n                  <button className=\"skip-button\" disabled=\"true\">\r\n                    Skip\r\n                  </button>\r\n                  <button className=\"yes-button\" disabled=\"true\">\r\n                    Yes\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    const current = this.state.remainingApps[0];\r\n    const fields = current.fields;\r\n    const id = current.id;\r\n    const applicantName = fields[\"Name\"];\r\n    const reviewerName = this.state.reviewerName;\r\n    const currentApp = this.renderApp(fields);\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <div className=\"header\">\r\n            <div className=\"header-application\">Application</div>\r\n            <div className=\"header-stats\">Apps Remaining: {this.state.remainingApps.length}</div>\r\n            <div className=\"header-stats\">Yeses Remaining: {this.state.numYeses}</div>\r\n          </div>\r\n\r\n          <div className=\"app-section\">\r\n            <div className=\"app-view\" id=\"app-view\">{currentApp}</div>\r\n            <div className=\"app-options\">\r\n              <h3 className=\"reviewer-name\">Reviewer: {this.state.reviewerName}</h3>\r\n              <h4 className=\"comments-label\">Comment:</h4>\r\n              <textarea id=\"comments-textbox\" className=\"comments-textbox\" name=\"app\" value={this.state.comments} onChange={this.handleCommentsChange.bind(this)}></textarea>\r\n              <div className=\"flag\">\r\n                <input id=\"flag-checkbox\" className=\"flag-checkbox\" type=\"checkbox\" checked={this.state.flag===\"Yes\"} onChange={this.handleFlagChange.bind(this)}></input>\r\n                <label htmlFor=\"flag-checkbox\">Flag</label>\r\n              </div>\r\n              <div className=\"vote\">\r\n                <h3 className=\"vote-label\">Vote</h3>\r\n                <button className=\"no-button\" disabled={this.state.numYeses <= 0} onClick={() => {\r\n                  this.airtableVoteHandler(applicantName, reviewerName, \"No\", this.state.flag, this.state.comments, id); window.scrollTo(0,0);}}>\r\n                  No\r\n                </button>\r\n                <button className=\"skip-button\" onClick={() => {\r\n                  this.airtableStateHandler(reviewerName); window.scrollTo(0,0);}}>\r\n                  Skip\r\n                </button>\r\n                <button className=\"yes-button\" disabled={this.state.numYeses <= 0} onClick={() => {\r\n                  this.airtableVoteHandler(applicantName, reviewerName, \"Yes\", this.state.flag, this.state.comments, id); window.scrollTo(0,0);}}>\r\n                  Yes\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Applications;\r\n","// For global variables.\r\n// The global scope in React Native is variable global.\r\n// For ex: as global.foo = foo, then you can use global.foo anywhere as a global variable.\r\n// Make sure you import './global.js' in your files to use global variables!\r\nglobal.AIRTABLE_KEY = \"keyd6qkfF0Q6csT9G\"; \r\nglobal.APPLICATIONS_URL = \"https://api.airtable.com/v0/appm1EwjHL56mOmPx/All%20Applications\"; // Applications airtable link\r\nglobal.DECISIONS_URL = \"https://api.airtable.com/v0/appm1EwjHL56mOmPx/Decisions\"; // Decisions airtable link\r\nglobal.OFFICERS = [\"sai\", \"maggie\", \"joy\"];\r\nglobal.NUM_YES = 30;\r\nglobal.IGNORED_FIELDS = [\r\n    \"Name\",\r\n    \"Email\",\r\n    \"Year\",\r\n    \"Phone Number\",\r\n];\r\n/** Custom ordering of questions */\r\nglobal.QUESTION_ORDER = [\r\n    6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,0,1,2,3,4,5,\r\n]","import React from \"react\";\r\nimport Application from \"./components/applications/application\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return <Application></Application>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}